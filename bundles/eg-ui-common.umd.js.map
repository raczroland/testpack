{
  "version": 3,
  "file": "eg-ui-common.umd.js",
  "sources": [
    "ng://eg-ui-common/out/src/app/modules/scheduler/scheduler.module.ts",
    "ng://eg-ui-common/out/src/app/modules/scheduler/scheduler/scheduler.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SchedulerComponent } from './scheduler/scheduler.component';\n\nimport '@progress/kendo-ui';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SchedulerComponent\n  ],\n  exports: [\n    SchedulerComponent,\n  ]\n})\nexport class SchedulerModule { }\n",
    "import {AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {CurrentTimeMarker} from '../models/current-time-marker';\nimport {Editable} from '../models/editable';\nimport {Footer} from '../models/footer';\nimport {Group} from '../models/group';\nimport {View} from '../models/view';\nimport {Resource} from '../models/resource';\nimport {ViewOptions} from '../models/view-options';\nimport {ViewPdf} from '../models/view-pdf';\n\ndeclare var kendo: any;\n\n// jQuery version: https://docs.telerik.com/kendo-ui/introduction\n\n@Component({\n  selector: 'eg-ui-scheduler',\n  template: `<div #scheduler></div>`,\n  styles: [``]\n})\nexport class SchedulerComponent implements AfterViewInit, OnDestroy, OnChanges {\n\n  // Properties:\n\n  /**\n   * The template used to render the \"all day\" scheduler events.\n   */\n  @Input() allDayEventTemplate: string = undefined\n\n  /**\n   * If set to true the scheduler will display a slot for \"all day\" events.\n   */\n  @Input() allDaySlot = true;\n\n  /**\n   * If set to false the widget will not bind to the data source during initialization.\n   */\n  @Input() autoBind  = true;\n\n  /**\n   * If set to false the \"current time\" marker of the scheduler would not be displayed.\n   */\n  @Input() currentTimeMarker: boolean | CurrentTimeMarker  = true;\n\n  /**\n   * Esem√©nyek.\n   */\n  @Input() dataSource: object | any[] | kendo.data.SchedulerDataSource = [];\n\n  /**\n   * The current date of the scheduler. Used to determine the period which is displayed by the widget.\n   */\n  @Input() date = undefined;\n\n  /**\n   * The template used to render the date header cells.\n   */\n  @Input() dateHeaderTemplate: string = undefined;\n\n  /**\n   * If set to true the user would be able to create new scheduler events and modify or delete existing ones.\n   */\n  @Input() editable: boolean | Editable = true;\n\n  /**\n   * The end time of the week and day views. The scheduler will display events ending before the endTime.\n   */\n  @Input() endTime: Date = undefined;\n\n  /**\n   * The template used to render the scheduler events.\n   */\n  @Input() eventTemplate: string = undefined;\n\n  /**\n   * If set to false the footer of the scheduler would not be displayed.\n   */\n  @Input() footer: boolean | Footer = true;\n\n  /**\n   * The configuration of the scheduler resource(s) grouping.\n   */\n  @Input() group: Group;\n\n  /**\n   * The template used to render the group headers of scheduler day, week, workWeek and timeline views.\n   */\n  @Input() groupHeaderTemplate: string;\n\n  /**\n   * The height of the widget. Numeric values are treated as pixels.\n   */\n  @Input() height: number | string;\n\n  /**\n   * The number of minutes represented by a major tick.\n   */\n  @Input() majorTick = 60;\n\n  /**\n   * The template used to render the major ticks.\n   */\n  @Input() majorTimeHeaderTemplate: string;\n\n  /**\n   * Constraints the maximum date which can be selected via the scheduler navigation.\n   */\n  @Input() max: Date;\n\n  /**\n   * The configuration of the scheduler messages. Use this option to customize or localize the scheduler messages.\n   */\n  @Input() messages: object; // TODO type\n\n  /**\n   * Constraints the minimum date which can be selected via the scheduler navigation.\n   */\n  @Input() min: Date;\n\n  /**\n   * The number of time slots to display per major tick.\n   */\n  @Input() minorTickCount = 2;\n\n  /**\n   * The template used to render the minor ticks.\n   */\n  @Input() minorTimeHeaderTemplate: string;\n\n  /**\n   * If set to true and the scheduler is viewed on mobile browser it will use adaptive rendering.\n   * Can be set to a string phone or tablet which will force the widget to use adaptive rendering regardless of browser type.\n\n   */\n  @Input() mobile: boolean | 'phone' | 'tablet' = false;\n\n  /**\n   * Configures the Kendo UI Scheduler PDF export settings.\n   */\n  @Input() pdf: ViewPdf;\n\n  /**\n   * The configuration of the scheduler resource(s).\n   * A scheduler resource is optional metadata that can be associated with a scheduler event.\n   */\n  @Input() resources: Resource[] = [];\n\n  /**\n   * If set to true the user would be able to select scheduler cells and events. By default selection is disabled.\n   */\n  @Input() selectable = false;\n\n  /**\n   * If set to true the view will be initially shown in business hours mode. By default view is displayed in full day mode.\n   */\n  @Input() showWorkHours = false;\n\n  /**\n   * If set to true the scheduler will snap events to the nearest slot during dragging (resizing or moving).\n   * Set it to false to allow free moving and resizing of events.\n   */\n  @Input() snap = true;\n\n  /**\n   * The start time of the week and day views. The scheduler will display events starting after the startTime.\n   */\n  @Input() startTime: Date;\n\n  /**\n   * The timezone which the scheduler will use to display the scheduler appointment dates.\n   */\n  @Input() timezone = 'Etc/UTC';\n\n  /**\n   * List of commands that the scheduler will display in its toolbar as buttons. Currently supports only the \"pdf\" command.\n   */\n  @Input() toolbar: string[];\n\n  /**\n   * The views displayed by the scheduler and their configuration.\n   */\n  @Input() views: (string | View)[] = [\n    \"day\",\n    {type: \"workWeek\", selected: true},\n    \"week\",\n    \"month\",\n    \"agenda\",\n    {type: \"timeline\", eventHeight: 50}\n  ];\n\n  /**\n   * The width of the widget. Numeric values are treated as pixels.\n   */\n  @Input() width: number | string;\n\n  /**\n   * Sets the start of the work day when the \"Show business hours\" button is clicked.\n   */\n  @Input() workDayStart: Date;\n\n  /**\n   * Sets the end of the work day when the \"Show business hours\" button is clicked.\n   */\n  @Input() workDayEnd: Date;\n\n  /**\n   * The start of working week (index based)\n   */\n  @Input() workWeekStart = 1;\n\n  /**\n   * The end of working week (index based).\n   */\n  @Input() workWeekEnd = 5;\n\n  // Events:\n\n  /**\n   * Fired when a new event is about to be added.\n   */\n  @Output() add = new EventEmitter<any>();\n\n  /**\n   * Fired when the user cancels editing by clicking the \"cancel\" button.\n   */\n  @Output() cancel = new EventEmitter<any>();\n\n  /**\n   * Fired when the user selects a cell or event in the scheduler.\n   */\n  @Output() change = new EventEmitter<any>();\n\n  /**\n   * Fired before the widget binds to its data source.\n   */\n  @Output() dataBinding = new EventEmitter<any>();\n\n  /**\n   * Fired when the widget is bound to data from its data source.\n   */\n  @Output() dataBound = new EventEmitter<any>();\n\n  /**\n   * Fired when the user opens a scheduler event in edit mode by or creates a new event.\n   */\n  @Output() edit = new EventEmitter<any>();\n\n  /**\n   * Fired when the user starts to drag an event.\n   */\n  @Output() moveStart = new EventEmitter<any>();\n\n  /**\n   * Fired when the user is moving an event.\n   */\n  @Output() move = new EventEmitter<any>();\n\n  /**\n   * Fired when the user stops moving an event.\n   */\n  @Output() moveEnd = new EventEmitter<any>();\n\n  /**\n   * Fired when the user changes the selected date, or view of the scheduler.\n   */\n  @Output() navigate = new EventEmitter<any>();\n\n  /**\n   * Fired when the user clicks the \"Export to PDF\" toolbar button.\n   */\n  @Output() pdfExport = new EventEmitter<any>();\n\n  /**\n   * Fired when the user performs \"destroy\" action.\n   */\n  @Output() remove = new EventEmitter<any>();\n\n  /**\n   * Fired when the user starts to resize an event.\n   */\n  @Output() resizeStart = new EventEmitter<any>();\n\n  /**\n   * Fired when the user is resizing an event.\n   */\n  @Output() resize = new EventEmitter<any>();\n\n  /**\n   * Fired when the user releases the mouse after resizing an event.\n   */\n  @Output() resizeEnd = new EventEmitter<any>();\n\n  /**\n   * Fired when the user saves a scheduler event by clicking the \"save\" button.\n   */\n  @Output() save = new EventEmitter<any>();\n\n  // Etc:\n\n  /**\n   * Scheduler element in HTML.\n   */\n  @ViewChild('scheduler') private schedulerEl: ElementRef;\n\n  /**\n   * The scheduler.\n   */\n  private scheduler: any;\n\n  /**\n   * Is the component initialized.\n   */\n  initialized = false;\n\n  /**\n   * Constructor.\n   */\n  constructor(\n    private elementRef: ElementRef\n  ) {}\n\n  /**\n   * Changes happened.\n   */\n  ngOnChanges() {\n    console.log('>>>')\n    if (this.initialized) {\n      this.destroyScheduler();\n      this.createScheduler();\n    }\n    // TODO use setDataSource instead\n  }\n\n  /**\n   * Initialization of the widget.\n   */\n  ngAfterViewInit() {\n    this.createScheduler();\n    this.initialized = true;\n  }\n\n  /**\n   * Destroy the widget.\n   */\n  ngOnDestroy() {\n    this.destroyScheduler();\n  }\n\n  private createScheduler() {\n    kendo.jQuery(this.schedulerEl.nativeElement).kendoScheduler({\n\n      // Options:\n      allDayEventTemplate: this.allDayEventTemplate,\n      allDaySlot: this.allDaySlot,\n      autoBind: this.autoBind,\n      currentTimeMarker: this.currentTimeMarker,\n      dataSource: this.dataSource,\n      date: this.date,\n      dateHeaderTemplate: this.dateHeaderTemplate,\n      editable: this.editable,\n      endTime: this.endTime,\n      eventTemplate: this.eventTemplate,\n      footer: this.footer,\n      group: this.group,\n      groupHeaderTemplate: this.groupHeaderTemplate,\n      height: this.height,\n      majorTick: this.majorTick,\n      majorTimeHeaderTemplate: this.majorTimeHeaderTemplate,\n      max: this.max,\n      messages: this.messages,\n      min: this.min,\n      minorTickCount: this.minorTickCount,\n      minorTimeHeaderTemplate: this.minorTimeHeaderTemplate,\n      mobile: this.mobile,\n      pdf: this.pdf,\n      resources: this.resources,\n      selectable: this.selectable,\n      showWorkHours: this.showWorkHours,\n      snap: this.snap,\n      startTime: this.startTime,\n      timezone: this.timezone,\n      toolbar: this.toolbar,\n      views: this.views,\n      width: this.width,\n      workDayStart: this.workDayStart,\n      workDayEnd: this.workDayEnd,\n      workWeekStart: this.workWeekStart,\n      workWeekEnd: this.workWeekEnd,\n\n      // Events:\n      add: this.handleEvent('add'),\n      cancel: this.handleEvent('cancel'),\n      change: this.handleEvent('change'),\n      dataBinding: this.handleEvent('dataBinding'),\n      dataBound: this.handleEvent('dataBound'),\n      edit: this.handleEvent('edit'),\n      moveStart: this.handleEvent('moveStart'),\n      move: this.handleEvent('move'),\n      moveEnd: this.handleEvent('moveEnd'),\n      navigate: this.handleEvent('navigate'),\n      pdfExport: this.handleEvent('pdfExport'),\n      remove: this.handleEvent('remove'),\n      resizeStart: this.handleEvent('resizeStart'),\n      resize: this.handleEvent('resize'),\n      resizeEnd: this.handleEvent('resizeEnd'),\n      save: this.handleEvent('save'),\n\n    });\n    this.scheduler = kendo.jQuery(this.schedulerEl.nativeElement).data('kendoScheduler');\n    // var dataSource = new kendo.data.SchedulerDataSource({\n    //   data: [\n    //     {\n    //       id: 1,\n    //       start: new Date(\"2013/6/6 08:00 AM\"),\n    //       end: new Date(\"2013/6/6 09:00 AM\"),\n    //       title: \"Interview\"\n    //     }\n    //   ]\n    // });\n    // this.scheduler.setDataSource(dataSource);\n  }\n\n  private destroyScheduler() {\n    kendo.jQuery(this.schedulerEl.nativeElement).empty();\n    kendo.destroy(this.elementRef.nativeElement);\n  }\n\n  /**\n   * Handling the events.\n   */\n  private handleEvent(eventType: string) {\n    return (event) => {\n      if (this[eventType] instanceof EventEmitter) {\n        this[eventType].emit(event);\n      }\n    };\n  }\n\n  /**\n   * Adds a new scheduler event and opens the edit form.\n   */\n  public addEvent(event: object) {\n    this.scheduler.addEvent(event);\n  }\n\n  /**\n   * Cancels the scheduler event editing. Closes the edit form.\n   */\n  public cancelEvent() {\n    this.scheduler.cancelEvent();\n  }\n\n  /**\n   * Gets currently expanded scheduler events.\n   */\n  public data() {\n    return this.scheduler.data();\n  }\n\n  /**\n   * Sets the current scheduler date.\n   */\n  public setDate(date) {\n    this.scheduler.date(date);\n  }\n\n  /**\n   * Gets the current scheduler date.\n   */\n  public getDate() {\n    return this.scheduler.date();\n  }\n\n  /**\n   * Prepares the widget for safe removal from DOM. Detaches all event handlers and removes jQuery.data attributes to avoid memory leaks.\n   * Calls destroy method of any child Kendo widgets.\n   */\n  public destroy() {\n    return this.scheduler.destroy();\n  }\n\n  /**\n   * Opens the specified scheduler event in the edit form.\n   */\n  public editEvent(event: string | kendo.data.SchedulerEvent) {\n    this.scheduler.editEvent(event);\n  }\n\n  /**\n   * Obtains an Array of the DOM elements, which correspond to the data items from the Kendo UI DataSource view.\n   */\n  public items() {\n    return this.scheduler.items();\n  }\n\n  /**\n   * Gets the event occurrence with the specified uid.\n   */\n  public occurrenceByUid(uid: string) {\n    return this.scheduler.occurrenceByUid(uid);\n  }\n\n  /**\n   * The result is scoped to the current displayed view. Therefore, the specified range should be within the view's time range.\n   */\n  public occurrencesInRange(start: Date, end: Date) {\n    return this.scheduler.occurrencesInRange(start, end);\n  }\n\n  /**\n   * Refreshes the Scheduler rendering using the current data items.\n   */\n  public refresh() {\n    this.scheduler.refresh();\n  }\n\n  /**\n   * Removes the specified scheduler event.\n   */\n  public removeEvent(event: string | kendo.data.SchedulerEvent) {\n    this.scheduler.removeEvent(event);\n  }\n\n  /**\n   * Get the relevant resources for a given slot.\n   */\n  public resourcesBySlot(slot: object) {\n    return this.scheduler.resourcesBySlot(slot);\n  }\n\n  /**\n   * Initiates the PDF export and returns a promise. Also triggers the pdfExport event.\n   */\n  public saveAsPDF() {\n    this.scheduler.saveAsPDF();\n  }\n\n  /**\n   * Saves the scheduler event which is open in the edit form and closes it.\n   */\n  public saveEvent() {\n    this.scheduler.saveEvent();\n  }\n\n  public select(events: any[], options: ViewOptions) {\n    this.scheduler.select(events, options);\n  }\n\n  /**\n   * Sets the data source of the widget.\n   */\n  public setDataSource(dataSource: kendo.data.SchedulerDataSource) {\n    this.scheduler.setDataSource(dataSource);\n  }\n\n  /**\n   * Get the time slot from given horizontal (x) and vertical (y) position.\n   */\n  public slotByPosition(xPosition: number, yPosition: number) {\n    return this.scheduler.slotByPosition(xPosition, yPosition);\n  }\n\n  /**\n   * Get the time slot from given element.\n   */\n  public slotByElement(element: any) {\n    return this.scheduler.slotByElement(element);\n  }\n\n  /**\n   * Sets the current Scheduler view.\n   */\n  public setView(type: string) {\n    this.scheduler.view(type);\n  }\n\n  /**\n   * Gets the current Scheduler view.\n   */\n  public getView() {\n    return this.scheduler.view();\n  }\n\n  /**\n   * The name of the current view. Can be used for refreshing the current view data.\n   */\n  public viewName() {\n    return this.scheduler.viewName();\n  }\n\n}\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "ViewChild",
    "Output",
    "Input",
    "EventEmitter"
  ],
  "mappings": "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"
}
