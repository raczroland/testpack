{
  "version": 3,
  "file": "eg-ui-common.umd.min.js",
  "sources": [
    "ng://eg-ui-common/out/src/app/modules/scheduler/scheduler/scheduler.component.ts",
    "ng://eg-ui-common/out/src/app/modules/scheduler/scheduler.module.ts"
  ],
  "sourcesContent": [
    "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, ViewChild } from '@angular/core';\n\nimport {\n  CurrentTimeMarker,\n  Editable,\n  Footer,\n  Group,\n  View,\n  Resource,\n  ViewOptions,\n  ViewPdf\n} from '../models';\n\nimport SchedulerMessages = kendo.ui.SchedulerMessages;\n\ndeclare var kendo: any;\n\n// jQuery version: https://docs.telerik.com/kendo-ui/introduction\n\n@Component({\n  selector: 'eg-ui-scheduler',\n  template: `<div #scheduler></div>`,\n  styles: [``]\n})\nexport class SchedulerComponent implements AfterViewInit, OnDestroy, OnChanges {\n\n  // Properties:\n\n  /**\n   * The template used to render the \"all day\" scheduler events.\n   */\n  @Input() allDayEventTemplate: string\n\n  /**\n   * If set to true the scheduler will display a slot for \"all day\" events.\n   */\n  @Input() allDaySlot = true;\n\n  /**\n   * If set to false the widget will not bind to the data source during initialization.\n   */\n  @Input() autoBind  = true;\n\n  /**\n   * If set to false the \"current time\" marker of the scheduler would not be displayed.\n   */\n  @Input() currentTimeMarker: boolean | CurrentTimeMarker  = true;\n\n  /**\n   * The data source of the widget which contains the scheduler events.\n   */\n  @Input() dataSource: object | any[] | kendo.data.SchedulerDataSource = [];\n\n  /**\n   * The current date of the scheduler. Used to determine the period which is displayed by the widget.\n   */\n  @Input() date;\n\n  /**\n   * The template used to render the date header cells.\n   */\n  @Input() dateHeaderTemplate: string;\n\n  /**\n   * If set to true the user would be able to create new scheduler events and modify or delete existing ones.\n   */\n  @Input() editable: boolean | Editable = true;\n\n  /**\n   * The end time of the week and day views. The scheduler will display events ending before the endTime.\n   */\n  @Input() endTime: Date = undefined;\n\n  /**\n   * The template used to render the scheduler events.\n   */\n  @Input() eventTemplate: string;\n\n  /**\n   * If set to false the footer of the scheduler would not be displayed.\n   */\n  @Input() footer: boolean | Footer = true;\n\n  /**\n   * The configuration of the scheduler resource(s) grouping.\n   */\n  @Input() group: Group;\n\n  /**\n   * The template used to render the group headers of scheduler day, week, workWeek and timeline views.\n   */\n  @Input() groupHeaderTemplate: string;\n\n  /**\n   * The height of the widget. Numeric values are treated as pixels.\n   */\n  @Input() height: number | string;\n\n  /**\n   * The number of minutes represented by a major tick.\n   */\n  @Input() majorTick = 60;\n\n  /**\n   * The template used to render the major ticks.\n   */\n  @Input() majorTimeHeaderTemplate: string;\n\n  /**\n   * Constraints the maximum date which can be selected via the scheduler navigation.\n   */\n  @Input() max: Date;\n\n  /**\n   * The configuration of the scheduler messages. Use this option to customize or localize the scheduler messages.\n   */\n  @Input() messages: SchedulerMessages;\n\n  /**\n   * Constraints the minimum date which can be selected via the scheduler navigation.\n   */\n  @Input() min: Date;\n\n  /**\n   * The number of time slots to display per major tick.\n   */\n  @Input() minorTickCount = 2;\n\n  /**\n   * The template used to render the minor ticks.\n   */\n  @Input() minorTimeHeaderTemplate: string;\n\n  /**\n   * If set to true and the scheduler is viewed on mobile browser it will use adaptive rendering.\n   * Can be set to a string phone or tablet which will force the widget to use adaptive rendering regardless of browser type.\n\n   */\n  @Input() mobile: boolean | 'phone' | 'tablet' = false;\n\n  /**\n   * Configures the Kendo UI Scheduler PDF export settings.\n   */\n  @Input() pdf: ViewPdf;\n\n  /**\n   * The configuration of the scheduler resource(s).\n   * A scheduler resource is optional metadata that can be associated with a scheduler event.\n   */\n  @Input() resources: Resource[] = [];\n\n  /**\n   * If set to true the user would be able to select scheduler cells and events. By default selection is disabled.\n   */\n  @Input() selectable = false;\n\n  /**\n   * If set to true the view will be initially shown in business hours mode. By default view is displayed in full day mode.\n   */\n  @Input() showWorkHours = false;\n\n  /**\n   * If set to true the scheduler will snap events to the nearest slot during dragging (resizing or moving).\n   * Set it to false to allow free moving and resizing of events.\n   */\n  @Input() snap = true;\n\n  /**\n   * The start time of the week and day views. The scheduler will display events starting after the startTime.\n   */\n  @Input() startTime: Date;\n\n  /**\n   * The timezone which the scheduler will use to display the scheduler appointment dates.\n   */\n  @Input() timezone = 'Etc/UTC';\n\n  /**\n   * List of commands that the scheduler will display in its toolbar as buttons. Currently supports only the \"pdf\" command.\n   */\n  @Input() toolbar: string[];\n\n  /**\n   * The views displayed by the scheduler and their configuration.\n   */\n  @Input() views: (string | View)[] = ['day', 'week'];\n\n  /**\n   * The width of the widget. Numeric values are treated as pixels.\n   */\n  @Input() width: number | string;\n\n  /**\n   * Sets the start of the work day when the \"Show business hours\" button is clicked.\n   */\n  @Input() workDayStart: Date;\n\n  /**\n   * Sets the end of the work day when the \"Show business hours\" button is clicked.\n   */\n  @Input() workDayEnd: Date;\n\n  /**\n   * The start of working week (index based)\n   */\n  @Input() workWeekStart = 1;\n\n  /**\n   * The end of working week (index based).\n   */\n  @Input() workWeekEnd = 5;\n\n  /**\n   * Culture.\n   */\n  @Input() culture = 'hu-HU';\n\n  // Events:\n\n  /**\n   * Fired when a new event is about to be added.\n   */\n  @Output() add = new EventEmitter<any>();\n\n  /**\n   * Fired when the user cancels editing by clicking the \"cancel\" button.\n   */\n  @Output() cancel = new EventEmitter<any>();\n\n  /**\n   * Fired when the user selects a cell or event in the scheduler.\n   */\n  @Output() change = new EventEmitter<any>();\n\n  /**\n   * Fired before the widget binds to its data source.\n   */\n  @Output() dataBinding = new EventEmitter<any>();\n\n  /**\n   * Fired when the widget is bound to data from its data source.\n   */\n  @Output() dataBound = new EventEmitter<any>();\n\n  /**\n   * Fired when the user opens a scheduler event in edit mode by or creates a new event.\n   */\n  @Output() edit = new EventEmitter<any>();\n\n  /**\n   * Fired when the user starts to drag an event.\n   */\n  @Output() moveStart = new EventEmitter<any>();\n\n  /**\n   * Fired when the user is moving an event.\n   */\n  @Output() move = new EventEmitter<any>();\n\n  /**\n   * Fired when the user stops moving an event.\n   */\n  @Output() moveEnd = new EventEmitter<any>();\n\n  /**\n   * Fired when the user changes the selected date, or view of the scheduler.\n   */\n  @Output() navigate = new EventEmitter<any>();\n\n  /**\n   * Fired when the user clicks the \"Export to PDF\" toolbar button.\n   */\n  @Output() pdfExport = new EventEmitter<any>();\n\n  /**\n   * Fired when the user performs \"destroy\" action.\n   */\n  @Output() remove = new EventEmitter<any>();\n\n  /**\n   * Fired when the user starts to resize an event.\n   */\n  @Output() resizeStart = new EventEmitter<any>();\n\n  /**\n   * Fired when the user is resizing an event.\n   */\n  @Output() resize = new EventEmitter<any>();\n\n  /**\n   * Fired when the user releases the mouse after resizing an event.\n   */\n  @Output() resizeEnd = new EventEmitter<any>();\n\n  /**\n   * Fired when the user saves a scheduler event by clicking the \"save\" button.\n   */\n  @Output() save = new EventEmitter<any>();\n\n  // Etc:\n\n  /**\n   * Scheduler element in HTML.\n   */\n  @ViewChild('scheduler') private schedulerEl: ElementRef;\n\n  /**\n   * The scheduler.\n   */\n  private scheduler: any;\n\n  /**\n   * Is the component initialized.\n   */\n  private initialized = false;\n\n  /**\n   * Constructor.\n   */\n  constructor(\n    private elementRef: ElementRef\n  ) {}\n\n  /**\n   * Changes happened.\n   */\n  ngOnChanges(changes) {\n    if (this.initialized && Object.keys(changes).some(key => key !== 'dataSource')) {\n      this.destroyScheduler();\n      this.createScheduler();\n    } else if (this.initialized && changes.dataSource &&  (changes.dataSource.previousValue !== changes.dataSource.currentValue)) {\n      this.setEvents(changes.dataSource.currentValue);\n    }\n  }\n\n  /**\n   * Initialization of the widget.\n   */\n  ngAfterViewInit() {\n    kendo.culture(this.culture);\n    this.createScheduler();\n    this.initialized = true;\n  }\n\n  /**\n   * Destroy the widget.\n   */\n  ngOnDestroy() {\n    this.destroyScheduler();\n  }\n\n  /**\n   * Creates the scheduler widget.\n   */\n  private createScheduler() {\n\n    kendo.jQuery(this.schedulerEl.nativeElement).kendoScheduler({\n\n      // Options:\n      allDayEventTemplate: this.allDayEventTemplate,\n      allDaySlot: this.allDaySlot,\n      autoBind: this.autoBind,\n      currentTimeMarker: this.currentTimeMarker,\n      dataSource: this.dataSource,\n      date: this.date,\n      dateHeaderTemplate: this.dateHeaderTemplate,\n      editable: this.editable,\n      endTime: this.endTime,\n      eventTemplate: this.eventTemplate,\n      footer: this.footer,\n      group: this.group,\n      groupHeaderTemplate: this.groupHeaderTemplate,\n      height: this.height,\n      majorTick: this.majorTick,\n      majorTimeHeaderTemplate: this.majorTimeHeaderTemplate,\n      max: this.max,\n      messages: this.messages,\n      min: this.min,\n      minorTickCount: this.minorTickCount,\n      minorTimeHeaderTemplate: this.minorTimeHeaderTemplate,\n      mobile: this.mobile,\n      pdf: this.pdf,\n      resources: this.resources,\n      selectable: this.selectable,\n      showWorkHours: this.showWorkHours,\n      snap: this.snap,\n      startTime: this.startTime,\n      timezone: this.timezone,\n      toolbar: this.toolbar,\n      views: this.views,\n      width: this.width,\n      workDayStart: this.workDayStart,\n      workDayEnd: this.workDayEnd,\n      workWeekStart: this.workWeekStart,\n      workWeekEnd: this.workWeekEnd,\n\n      // Events:\n      add: this.handleEvent('add'),\n      cancel: this.handleEvent('cancel'),\n      change: this.handleEvent('change'),\n      dataBinding: this.handleEvent('dataBinding'),\n      dataBound: this.handleEvent('dataBound'),\n      edit: this.handleEvent('edit'),\n      moveStart: this.handleEvent('moveStart'),\n      move: this.handleEvent('move'),\n      moveEnd: this.handleEvent('moveEnd'),\n      navigate: this.handleEvent('navigate'),\n      pdfExport: this.handleEvent('pdfExport'),\n      remove: this.handleEvent('remove'),\n      resizeStart: this.handleEvent('resizeStart'),\n      resize: this.handleEvent('resize'),\n      resizeEnd: this.handleEvent('resizeEnd'),\n      save: this.handleEvent('save'),\n\n    });\n\n    this.scheduler = kendo.jQuery(this.schedulerEl.nativeElement).data('kendoScheduler');\n\n  }\n\n  /**\n   * Destroys the scheduler widget.\n   */\n  private destroyScheduler() {\n    kendo.jQuery(this.schedulerEl.nativeElement).empty();\n    kendo.destroy(this.elementRef.nativeElement);\n  }\n\n  /**\n   * Handling the events.\n   */\n  private handleEvent(eventType: string) {\n    return (event) => {\n      if (this[eventType] instanceof EventEmitter) {\n        this[eventType].emit(event);\n      }\n    };\n  }\n\n  /**\n   * Adds a new scheduler event and opens the edit form.\n   */\n  public addEvent(event: object) {\n    this.scheduler.addEvent(event);\n  }\n\n  /**\n   * Cancels the scheduler event editing. Closes the edit form.\n   */\n  public cancelEvent() {\n    this.scheduler.cancelEvent();\n  }\n\n  /**\n   * Gets currently expanded scheduler events.\n   */\n  public data() {\n    return this.scheduler.data();\n  }\n\n  /**\n   * Sets the current scheduler date.\n   */\n  public setDate(date) {\n    this.scheduler.date(date);\n  }\n\n  /**\n   * Gets the current scheduler date.\n   */\n  public getDate() {\n    return this.scheduler.date();\n  }\n\n  /**\n   * Prepares the widget for safe removal from DOM. Detaches all event handlers and removes jQuery.data attributes to avoid memory leaks.\n   * Calls destroy method of any child Kendo widgets.\n   */\n  public destroy() {\n    return this.scheduler.destroy();\n  }\n\n  /**\n   * Opens the specified scheduler event in the edit form.\n   */\n  public editEvent(event: string | kendo.data.SchedulerEvent) {\n    this.scheduler.editEvent(event);\n  }\n\n  /**\n   * Obtains an Array of the DOM elements, which correspond to the data items from the Kendo UI DataSource view.\n   */\n  public items() {\n    return this.scheduler.items();\n  }\n\n  /**\n   * Gets the event occurrence with the specified uid.\n   */\n  public occurrenceByUid(uid: string) {\n    return this.scheduler.occurrenceByUid(uid);\n  }\n\n  /**\n   * The result is scoped to the current displayed view. Therefore, the specified range should be within the view's time range.\n   */\n  public occurrencesInRange(start: Date, end: Date) {\n    return this.scheduler.occurrencesInRange(start, end);\n  }\n\n  /**\n   * Refreshes the Scheduler rendering using the current data items.\n   */\n  public refresh() {\n    this.scheduler.refresh();\n  }\n\n  /**\n   * Removes the specified scheduler event.\n   */\n  public removeEvent(event: string | kendo.data.SchedulerEvent) {\n    this.scheduler.removeEvent(event);\n  }\n\n  /**\n   * Get the relevant resources for a given slot.\n   */\n  public resourcesBySlot(slot: object) {\n    return this.scheduler.resourcesBySlot(slot);\n  }\n\n  /**\n   * Initiates the PDF export and returns a promise. Also triggers the pdfExport event.\n   */\n  public saveAsPDF() {\n    this.scheduler.saveAsPDF();\n  }\n\n  /**\n   * Saves the scheduler event which is open in the edit form and closes it.\n   */\n  public saveEvent() {\n    this.scheduler.saveEvent();\n  }\n\n  public select(events: any[], options: ViewOptions) {\n    this.scheduler.select(events, options);\n  }\n\n  /**\n   * Sets the data source of the widget.\n   */\n  public setDataSource(dataSource: kendo.data.SchedulerDataSource) {\n    this.scheduler.setDataSource(dataSource);\n  }\n\n  /**\n   * Get the time slot from given horizontal (x) and vertical (y) position.\n   */\n  public slotByPosition(xPosition: number, yPosition: number) {\n    return this.scheduler.slotByPosition(xPosition, yPosition);\n  }\n\n  /**\n   * Get the time slot from given element.\n   */\n  public slotByElement(element: any) {\n    return this.scheduler.slotByElement(element);\n  }\n\n  /**\n   * Sets the current Scheduler view.\n   */\n  public setView(type: string) {\n    this.scheduler.view(type);\n  }\n\n  /**\n   * Gets the current Scheduler view.\n   */\n  public getView() {\n    return this.scheduler.view();\n  }\n\n  /**\n   * The name of the current view. Can be used for refreshing the current view data.\n   */\n  public viewName() {\n    return this.scheduler.viewName();\n  }\n\n  /**\n   * Set events via dataSource.\n   */\n  public setEvents(events: any[]) {\n      this.setDataSource(new kendo.data.SchedulerDataSource({ data: events }));\n  }\n\n}\n",
    "import { LOCALE_ID, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport '@progress/kendo-ui';\nimport '@progress/kendo-ui/js/cultures/kendo.culture.hu-HU.js';\nimport '@progress/kendo-ui/js/messages/kendo.messages.hu-HU.js';\n\nimport { SchedulerComponent } from './scheduler/scheduler.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    SchedulerComponent,\n  ],\n  exports: [\n    SchedulerComponent,\n  ],\n  providers: [\n    {\n      provide: LOCALE_ID, useValue: 'hu-HU'\n    },\n  ]\n})\nexport class SchedulerModule { }\n"
  ],
  "names": [
    "this",
    "allDaySlot",
    "resources",
    "createScheduler",
    "SchedulerComponent",
    "prototype",
    "ngAfterViewInit",
    "kendo",
    "culture",
    "initialized",
    "destroyScheduler",
    "allDayEventTemplate",
    "autoBind",
    "editable",
    "endTime",
    "footer",
    "group",
    "groupHeaderTemplate",
    "height",
    "majorTick",
    "majorTimeHeaderTemplate",
    "max",
    "messages",
    "min",
    "minorTickCount",
    "minorTimeHeaderTemplate",
    "mobile",
    "pdf",
    "selectable",
    "showWorkHours",
    "snap",
    "startTime",
    "timezone",
    "toolbar",
    "views",
    "width",
    "workDayStart",
    "workDayEnd",
    "workWeekStart",
    "workWeekEnd",
    "add",
    "handleEvent",
    "cancel",
    "change",
    "dataBinding",
    "dataBound",
    "edit",
    "moveStart",
    "move",
    "moveEnd",
    "pdfExport",
    "remove",
    "resizeStart",
    "resize",
    "resizeEnd",
    "save",
    "scheduler",
    "jQuery",
    "schedulerEl",
    "nativeElement",
    "data",
    "empty",
    "destroy",
    "elementRef",
    "_this",
    "event",
    "eventType",
    "EventEmitter",
    "addEvent",
    "date",
    "editEvent",
    "occurrenceByUid",
    "uid",
    "occurrencesInRange",
    "start",
    "end",
    "removeEvent",
    "resourcesBySlot",
    "slot",
    "select",
    "events",
    "options",
    "setDataSource",
    "dataSource",
    "slotByPosition",
    "xPosition",
    "yPosition",
    "slotByElement",
    "element",
    "view",
    "type",
    "SchedulerDataSource",
    "styles",
    "ElementRef",
    "propDecorators",
    "Input",
    "eventTemplate",
    "Output",
    "navigate",
    "ViewChild",
    "args",
    "SchedulerModule",
    "exports",
    "providers",
    "provide",
    "LOCALE_ID",
    "useValue",
    "ctorParameters"
  ],
  "mappings": "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"
}
